Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order. You read an list of numbers. You need to arrange the elements in ascending order and print the result. The sorting should be done using bubble sort.

Input Format: The first line reads the number of elements in the array. The second line reads the array elements one by one.


Output Format: The output should be a sorted list.



For example:

Input	Result
6
3 4 8 7 1 2
1 2 3 4 7 8
5 
4 5 2 3 1
1 2 3 4 5
Answer:
#Bubble sort
n=int(input())
s=input()
l=s.split()
l=[int(l[i]) for i in range(0,len(l))]
for i in range(0,n):
    for j in range(0,n-i-1):
        if l[j]>l[j+1]:
            l[j],l[j+1]=l[j+1],l[j]
for i in l:
    print(i,end=' ')

Question 2
Correct
Mark 1.00 out of 1.00
Flag question
Question text
Write a Python program for binary search.

For example:

Input	Result
1,2,3,5,8
6
False
3,5,9,45,42
42
True
Answer:def binary_search(arr, x):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (high + low) // 2  # Calculate the mid index

        if arr[mid] < x:
            low = mid + 1  # Ignore the left half
        elif arr[mid] > x:
            high = mid - 1  # Ignore the right half
        else:
            return mid  # x is present at mid

    return -1  # x is not present in array

# Read input from user
arr = input()
x = int(input())

# Process input
arr = arr.split(',')
arr = [int(element) for element in arr]
arr.sort()

# Function call
result = binary_search(arr, x)

# Output result
if result != -1:
    print("True")
else:
    print("False")


Correct
Marks for this submission: 1.00/1.00.
Question 3

Given an list, find peak element in it. A peak element is an element that is greater than its neighbors.

An element a[i] is a peak element if

A[i-1] <= A[i] >=a[i+1] for middle elements. [0<i<n-1]

A[i-1] <= A[i] for last element [i=n-1]

A[i]>=A[i+1] for first element [i=0]

Input Format

The first line contains a single integer n , the length of A .
The second line contains n space-separated integers,A[i].

Output Format

Print peak numbers separated by space.

Sample Input

5

8 9 10 2 6

Sample Output

10 6


For example:

Input	Result
4
12 3 6 8 
12 8
Answer:#peak element
n=int(input())
s=input()
z=s.split()
l=[]

for i in range(0,n):
    if i==0:
        if int(z[i])>int(z[i+1]):
            l.append(int(z[i]))
        else:
            l.append(int(z[i+1]))
    elif i==n-1:
        if int(z[i])>int(z[i-1]) and int(z[i]) not in l:
            l.append(int(z[i]))
        elif int(z[i])<int(z[i-1]) and int(z[i-1]) not in l:
            l.append(int(z[i-1]))
    else:
        m=int(z[i-1])
        for j in range(i-1,i+2):
            if m<int(z[j]):
                m=int(z[j])
        if m not in l:
            l.append(m)
            
for i in l:
    print(i,end=' ')
Question 4

Given an listof integers, sort the array in ascending order using the Bubble Sort algorithm above. Once sorted, print the following three lines:

1.      List is sorted in numSwaps swaps., where numSwaps is the number of swaps that took place.

2.      First Element: firstElement, the  first element in the sorted list.

3.      Last Element: lastElement, the last element in the sorted list.

For example, given a worst-case but small array to sort: a=[6,4,1]. It took  3 swaps to sort the array. Output would be

Array is sorted in 3 swaps.  
First Element: 1  
Last Element: 6   
Input Format

The first line contains an integer,n , the size of the list a .
The second line contains  n,  space-separated integers a[i].

Constraints

·         2<=n<=600

·         1<=a[i]<=2x106.

Output Format

You must print the following three lines of output:

1.      List is sorted in numSwaps swaps., where numSwaps is the number of swaps that took place.

2.      First Element: firstElement, the  first element in the sorted list.

3.      Last Element: lastElement, the last element in the sorted list.

Sample Input 0

3

1 2 3

Sample Output 0

List is sorted in 0 swaps.

First Element: 1

Last Element: 3



For example:

Input	Result
3
3 2 1
List is sorted in 3 swaps.
First Element: 1
Last Element: 3
5
1 9 2 8 4
List is sorted in 4 swaps.
First Element: 1
Last Element: 9
Answer:#BUBBLE SORT
n=int(input())
s=input()
l=s.split()
l=[int(l[i]) for i in range(0,len(l))]
c=0
for i in range(0,n):
    for j in range(0,n-i-1):
        if l[j]>l[j+1]:
            l[j],l[j+1]=l[j+1],l[j]
            c=c+1
print("List is sorted in",c,"swaps.")
print("First Element:",l[0])
print("Last Element:",l[-1])

Question 5

To find the frequency of numbers in a list and display in sorted order.

Constraints: 

1<=n, arr[i]<=100 

Input: 

1 68 79 4 90 68 1 4 5 

output:

 1 2

 4 2

 5 1

 68 2

 79 1 

90 1


For example:

Input	Result
4 3 5 3 4 5
3 2
4 2
5 2
Answer:#frequency
s=input()
z=s.split()
z=[int(z[i]) for i in range(0,len(z))]
z.sort()
l=list()

for i in range(0,len(z)):
    c=1
    for j in range(i+1,len(z)):
        if z[i]==z[j]:
            c=c+1
    if z[i] not in l:
        print(z[i],c,end=' ')
        l.append(z[i])
        print()
